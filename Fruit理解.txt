DELTA_INC_LINE 返回(from, to)之间的方向(或当不在一直线上时无方向)


void search_full_init(list_t * list, board_t * board) 
1. 读取各种搜素设置及参数 option_get_int(string),option_get_bool(string)

2. list_note(list_t * list)
2.1 void list_note(list_t * list) 给list中的每个MOVE按 -move_order 打分
2.1.1 int move_order(int move) 返回move的from, to 和第13、14位
2.2 void list_sort(list_t * list) 根据value，给list中的move从大到小冒泡排序

3 bool trans_retrieve(trans_t * trans, uint64 key, int * move, int * min_depth, int * max_depth, int * min_value, int * max_value) 查找hash表
3.1 entry_t * trans_entry(trans_t * trans, uint64 key) 根据key在trans表中查找并返回entry
3.2 比对entry相邻的ClusterSize=4个entry, 如果lock与相等，返回entry数值，并更新date。

4. void note_moves(list_t * list, const board_t * board, int height, int trans_killer) 
给list中的每个MOVE打分
4.1 int move_value(int move, const board_t * board, int height, int trans_killer) 
按照TransKiller, Good Capture, Killer, Quiet Move, Bad Capture的顺序打分
4.2 int capture_value(int move, const board_t * board) 
4.2.1 int mvv_lva(int move, const board_t * board) 返回被吃子和走子的PIECE_ORDER差异
4.2.2 bool capture_is_good(int move, const board_t * board)  走子小于被吃的棋子
4.3 int quiet_move_value(int move, const board_t * board) 根据History打分

5. void list_sort(list_t * list)


int search_full_root(list_t * list, board_t * board, int depth, int search_type)
1. int full_root

int full_root(list_t * list, board_t * board, int alpha, int beta, int depth, int height, int search_type) 
遍历根节点
	1 void search_update_root() 显示当前搜索的根节点着法
	1.1 void search_update_current() 更新搜索时间、节点数、速度
	2 int full_new_depth(int depth, int move, board_t * board, bool single_reply, bool in_pv) 
	如果唯一应招、好的Re-capture、照将，则depth++;
	2.1 int see_move(int move, const board_t * board) 
	2.1.1 void alist_build(alist_t * alist, const board_t * board, int to, int colour) 
			遍历，查找能攻击to格的colour方棋子，返回alist
	2.1.1.1 void alist_add(alist_t * alist, int square, const board_t * board) 
			将square 加入alist，并按棋子价值排序
	2.1.2 void alist_remove(alist_t * alist, int pos) 移除alist[pos]
	2.1.2 int see_rec(alists_t * alists, const board_t * board, int colour, int to, int piece_value)
	2.1.2.1 int alist_pop(alist_t * alist, const board_t * board) 弹出alist队尾的square
	2.1.2.2 void alists_hidden(alists_t * alists, const board_t * board, int from, int to) 把被to遮住的slider piece加到alists里
	2.2 bool move_is_check(int move, board_t * board) move是否照将对方。检查是否直接攻击王或者抽将
	2.2.1 bool is_pinned(const board_t * board, int square, int colour) square是否在slider与king[colour]之间

	3 void move_do(board_t * board, int move, undo_t * undo) 走子，并返回undo
	存储key，交换行棋方，层数+1，吃子，
	3.1 void square_clear(board_t * board, int square, int piece, bool update) 
	更新棋子列表和数量，计算开局到残局的进度，更新key和子力key
	3.2 void square_move(board_t * board, int from, int to, int piece, bool update)  走子

	4 int full_search(board_t * board, int alpha, int beta, int depth, int height, mv_t pv[], int node_type)
	4.1 int full_quiescence(board_t * board, int alpha, int beta, int depth, int height, mv_t pv[]) 
	照将中，depth++
	mate-distance pruning
	bool trans_retrieve(trans_t * trans, uint64 key, int * move, int * min_depth, int * max_depth, int * min_value, int * max_value) 查找hash表
	4.2 int value_from_trans(int value, int height) 如果value是杀棋，value加上层数
	根据TT查询到的值，进行alpha裁剪和beta裁剪
	null-move pruning
	4.3 void move_do_null(board_t * board, undo_t * undo) 
	4.4 bool do_ver(const board_t * board) 确认不处在zugzwang局面
	4.5 int full_no_null(board_t * board, int alpha, int beta, int depth, int height, mv_t pv[], int node_type, int trans_move, int * best_move) {
	4.6 void sort_init(sort_t * sort, board_t * board, const attack_t * attack, int depth, int height, int trans_killer) 
	生成合法着法，返回sort
	Single reply extention
	4.7 int sort_next(sort_t * sort) 阶段性生成下一步着法，测试其合法性后返回
	4.7.1 int history_prob(int move, const board_t * board) 返回relative history heuristic
	4.7.1.1 int history_index(int move, const board_t * board) 返回 piece * 64 + tosqure]

	history pruning。history 分数低于正常的60%,depth--
	futility pruning
	4.8 bool move_is_dangerous(int move, const board_t * board) 兵即将升变
	history-pruning re-search

	4.9 void good_move(int move, const board_t * board, int depth, int height) 
		move是非吃子的最佳着法。更新killer[2]。history[index]+=depth*depth。history上限16384，超过后与history一起打对折。
	4.10 void history_bad(int move, const board_t * board) 
		move是非吃子的非最佳着法。HistTot[index]++，上限16384，超过后与history一起打对折。
	存储最佳着法
	4.11 int value_to_trans(int value, int height) 如果胜负已分，value = MATE-height
	void trans_store(trans_t * trans, uint64 key, int move, int depth, int min_value, int max_value) 

	5 void move_undo(board_t * board, int move, const undo_t * undo) 


int full_quiescence(board_t * board, int alpha, int beta, int depth, int height, mv_t pv[]) 
1 void search_check()	看是否到了限定的时间、深度，以结束搜素
2 void search_send_stat() 更新搜索统计数据
3 bool board_is_repetition(const board_t * board)
4 bool recog_draw(const board_t * board) 是否官和局面
5 mate-distance pruning
6 如果不被照将，审局评分，并进行alpha-beta裁剪
7 void sort_init_qs(sort_t * sort, board_t * board, const attack_t * attack, bool check) 
	如果被照将，筛选所有防御着法；如果剩余深度>=0,筛选吃子及照将；否则，只筛选吃子。
遍历着法列表，
	8 int sort_next_qs(sort_t * sort) 
		8.1	void gen_pseudo_evasions(list_t * list, const board_t * board, const attack_t * attack) 
			8.1.1 bool gen_evasions(list_t * list, const board_t * board, const attack_t * attack, bool legal, bool stop) {
				通过躲将、吃子和阻拦三种手段生成防御着法
			8.2 void note_moves_simple(list_t * list, const board_t * board) 
				给列表中的所有着法打分
			8.2.1 int move_value_simple(int move, const board_t * board) 
			8.2.1.1 int mvv_lva(int move, const board_t * board) 返回被吃子和走子的PIECE_ORDER差异
			排序
			8.6 bool pseudo_is_legal(int move, board_t * board) 
				检查着法是否导致自杀。如果动王，看王的新位置是否受攻击。如果动其它子，看是否被pin且discover攻击线路。
			8.6.1 bool is_attacked(const board_t * board, int to, int colour) 
				遍历colour方棋子，返回是否攻击to格
		8.3	void gen_captures(list_t * list, const board_t * board) 
			生成吃子着法，返回list
			8.4 void note_mvv_lva(list_t * list, const board_t * board) 
				给列表中的所有着法打分
			排序（与躲将的打分排序几乎无差别）
			如果不是好的吃子或者造成自杀，跳过
			8.7 bool capture_is_good(int move, const board_t * board)
			8.7.1 int see_move(int move, const board_t * board) 
		8.5 void gen_quiet_checks(list_t * list, board_t * board) 
		8.5.1 void add_quiet_checks(list_t * list, const board_t * board) 
			8.5.1.1 void find_pins(int list[], const board_t * board)
				遍历己方所有棋子，如能间接照将，将阻拦的square放入list
			生成所有抽将和直接照将着法
			如果自杀或者送吃，跳过
	delta pruning，默认不开
	走子
	做下一层静态搜索
	撤销走子
	alpha-beta裁剪


static int full_no_null(board_t * board, int alpha, int beta, int depth, int height, mv_t pv[], int node_type, int trans_move, int * best_move) {





4.1.5 bool board_is_mate(const board_t * board) 被将军且没有规避手段
4.1.5.1 void attack_set(attack_t * attack, const board_t * board) 
	遍历对方棋子，把所有将军的棋子位置和方向，放到attack列表里
4.1.5.2 bool legal_evasion_exist(const board_t * board, const attack_t * attack)  有躲避照将的着法
4.1.5.2.1 bool gen_evasions(list_t * list, const board_t * board, const attack_t * attack, bool legal, bool stop) 


void search()
读取开局库
1 void gen_legal_moves(list_t * list, board_t * board) 
	先检查是否被照将，然后生成躲避着法或所有着法
1.1 void gen_legal_evasions(list_t * list, const board_t * board, const attack_t * attack) 
	调用 gen_evasions
1.1.1 bool gen_evasions(list_t * list, const board_t * board, const attack_t * attack, bool legal, bool stop) 
	生成所有躲避将军的着法，放到list里
1.2 void gen_moves(list_t * list, const board_t * board) 
	调用 add_moves
1.2.1 void add_moves(list_t * list, const board_t * board) 
	生成己方所有着法，放到list里
2 如果唯一着法，搜索深度4
3 更新搜索信息
4 复制局面，开始计时
5 void trans_inc_date(trans_t * trans) 
	TT的date++,所有16个age--
5.1	void trans_set_date(trans_t * trans, int date) 
	TT的统计信息清零
5.1.1 int trans_age(const trans_t * trans, int date) 
6 void sort_init() 
	killer和history清零，着法顺序码初始化
7 void search_full_init(list_t * list, board_t * board) 
	读取各种参数设置，给根节点打分排序
8 iterative deepening
8.1 search_full_root。如果第一次搜索，SearchShort，即每个根节点都当成PV节点做一层搜索
8.2 更新搜索信息
8.3 如果首选着法大于第二着法1.5个兵，easy = true;
8.4 如果最佳着法的分数比上一层搜索降低0.5个兵，bad = true
8.5 检查是否到达规定的深度和时间
8.6 如果easy且时间过60%且!bad，返回


search()->search_full_root()->full_root()->full_search()
full_new_depth调用SEE，其SEE比较繁琐，是否值得存疑。但它是在search前调用，好的预排序或许可以减少调用SEE的次数。
